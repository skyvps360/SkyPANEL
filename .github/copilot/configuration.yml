# GitHub Copilot Configuration File for SkyPANEL

# Project Overview
description: |
  SkyPANEL is an enterprise-grade VirtFusion client portal built with TypeScript, React, Node.js/Express, and PostgreSQL.
  It provides a comprehensive solution for VPS hosting management with features including VirtFusion integration,
  AI-powered support, real-time monitoring, Discord integration, dynamic theming, and advanced user management.

# Project Structure Details
tech_stack:
  frontend:
    - React 18
    - TypeScript
    - Vite
    - TailwindCSS
    - Shadcn/UI
    - Radix UI
    - React Query (TanStack Query)
    - Wouter (routing)
    - Framer Motion
  backend:
    - Node.js
    - Express
    - TypeScript
    - PostgreSQL
    - Drizzle ORM
    - Zod (validation)
  ai_integrations:
    - Google Gemini 2.5 Flash
  third_party:
    - VirtFusion API
    - PayPal SDK
    - Discord.js
    - SendGrid

# File Structure
key_directories:
  server: Backend server implementation with Express
  client/src: Frontend React application
  shared: Shared code including database schema
  migrations: Database migrations
  scripts: Utility scripts

# Coding Standards
code_standards:
  style:
    - Use TypeScript for type safety
    - Follow functional programming principles where possible
    - Use React hooks for state management
    - Implement proper error handling and validation
  naming:
    - Use camelCase for variables and functions
    - Use PascalCase for components and types
    - Use UPPER_CASE for constants
  imports:
    - Group imports by external libraries, internal modules, and types
    - Avoid excessive component nesting

# Common Tasks
common_tasks:
  - task: Add a new API endpoint
    context: |
      1. Create a new route handler in server/routes/
      2. Add validation with Zod
      3. Implement the controller logic
      4. Update the API documentation in md-docs/
      5. Test with appropriate authentication

  - task: Create a new React component
    context: |
      1. Add the component to client/src/components/
      2. Use TypeScript for props definitions
      3. Implement responsive design with TailwindCSS
      4. Consider accessibility requirements
      5. Add proper error handling and loading states

  - task: Add a new database table
    context: |
      1. Update the schema in shared/schema.ts
      2. Create a migration script in migrations/
      3. Add Zod validation schemas
      4. Update related service functions

  - task: Integrate with VirtFusion API
    context: |
      1. Add methods to server/virtfusion-service.ts
      2. Implement proper error handling and retries
      3. Add caching where appropriate
      4. Update documentation

# Database Schema Hints
database:
  main_tables:
    - users: User accounts and profile information
    - servers: VPS instance information
    - transactions: Billing and payment records
    - tickets: Support ticket system
    - serverLogs: Server action tracking

# Specific Guidance
guidance:
  - When implementing new features, ensure they work with the existing theming system
  - All API endpoints should include proper validation and error handling
  - Database operations should use Drizzle ORM with proper transactions
  - New UI components should follow the existing design system
  - Security considerations should be paramount for all authentication-related code
  - VirtFusion integration requires proper error handling and retry logic

# Common Pitfalls
common_pitfalls:
  - Not handling asynchronous operations correctly
  - Missing validation in API endpoints
  - Not considering error states in UI components
  - Forgetting to update documentation for new features
  - Not implementing proper authorization checks
  - Not using TypeScript properly for type safety

# Preferred Libraries
preferred_libraries:
  state_management: React Query (TanStack Query)
  forms: React Hook Form with Zod validation
  styling: TailwindCSS with Shadcn/UI components
  authentication: Passport.js with local strategy
  api_requests: Axios with proper error handling
  validation: Zod for both frontend and backend